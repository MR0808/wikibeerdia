
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOTSAY
}

enum Status {
  DRAFT
  PENDING
  APPROVED
}

model User {
  id                      String    @id @default(cuid())
  firstName               String?   
  lastName                String?
  displayName             String?   @unique
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  gender                  Gender?
  password                String?
  country                 Country? @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId               String?
  state                   State? @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId                 String?
  dateOfBirth             DateTime?
  breweries               Brewery[]
  beers                   Beer[]
  breweryReviews          BreweryReview[]
  beerReviews             BeerReview[]
  role                    UserRole @default(USER)
  accounts                Account[]
  emailOld                String?
  passwordResetToken      String?
  passwordResetExpires    DateTime?
  otpEnabled              Boolean @default(false)
  otpVerified             Boolean @default(false)
  otpBase32               String?
  otpAuthUrl              String?
  otpBackups              String[]
  twoFactorConfirmation   TwoFactorConfirmation?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id        String @id @default(cuid())
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([userId])
}

model Country {
  id        String  @id @default(cuid())
  isoCode   String
  name      String
  currency  String
  states    State[]
  users     User[]
}

model State {
  id        String  @id @default(cuid())
  isoCode   String
  name      String
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId String
  cities    City[]
  users     User[]

}

model City {
  id          String  @id @default(cuid())
  name        String
  state       State @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId     String
  breweries   Brewery[]
}

model Brewery {
  id                String   @id @default(uuid())
  name              String
  status            Status
  city              City @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId            String
  description       String
  website           String
  logoUrl           String
  images            String[]
  beers             Beer[]
  breweryReviews    BreweryReview[]
  breweryType       BreweryType @relation(fields: [breweryTypeId], references: [id], onDelete: Cascade)
  breweryTypeId     String
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model BreweryReview {
  id          String   @id @default(uuid())
  rating      Int
  comment     String?
  brewery     Brewery @relation(fields: [breweryId], references: [id], onDelete: Cascade)
  breweryId   String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  status      Status @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BreweryType {
  id          String   @id @default(uuid())
  name        String
  status      Status
  breweries   Brewery[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Beer {
  id          String   @id @default(uuid())
  name        String
  status      Status
  description String
  abv         String
  ibu         String?
  yearCreated Int?
  available   Boolean
  beerReviews BeerReview[]
  brewery     Brewery @relation(fields: [breweryId], references: [id], onDelete: Cascade)
  breweryId   String
  style       Style @relation(fields: [styleId], references: [id], onDelete: Cascade)
  styleId     String
  subStyle    SubStyle? @relation(fields: [subStyleId], references: [id], onDelete: Cascade)
  subStyleId  String?
  images      String[]
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BeerReview {
  id          String   @id @default(uuid())
  rating      Int
  comment     String?
  beer        Beer @relation(fields: [beerId], references: [id], onDelete: Cascade)
  beerId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  status      Status @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Style {
  id              String   @id @default(uuid())
  name            String
  description     String
  subStyles       SubStyle[]
  beers           Beer[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SubStyle {
  id              String   @id @default(uuid())
  name            String
  description     String
  style           Style @relation(fields: [styleId], references: [id], onDelete: Cascade)
  styleId         String
  beers           Beer[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}