datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOTSAY
}

enum Status {
  DRAFT
  PENDING
  APPROVED
  DISABLED
  REJECTED
}

enum ReportTypes {
  BEER
  BREWERY
  BREWERYREVIEW
  BEERREVIEW
}

model User {
  id                    String                 @id @default(cuid())
  firstName             String?
  lastName              String?
  displayName           String?                @unique
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  gender                Gender?
  password              String?
  country               Country?               @relation(fields: [countryId], references: [id], onDelete: SetNull)
  countryId             String?
  state                 State?                 @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId               String?
  dateOfBirth           DateTime?
  breweries             Brewery[]
  beers                 Beer[]
  breweryReviews        BreweryReview[]
  beerReviews           BeerReview[]
  breweryFavourites     BreweryFavorite[]
  beerFavourites        BeerFavorite[]
  breweryTypes          BreweryType[]
  parentStyles          ParentStyle[]
  blogVotes             BlogVote[]
  styles                Style[]
  role                  UserRole               @default(USER)
  accounts              Account[]
  reports               Report[]
  emailOld              String?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  otpEnabled            Boolean                @default(false)
  otpVerified           Boolean                @default(false)
  otpBase32             String?
  otpAuthUrl            String?
  otpBackups            String[]
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  BreweryEdit           BreweryEdit[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId])
}

model Country {
  id          String        @id @default(cuid())
  isoCode     String
  name        String
  currency    String
  states      State[]
  users       User[]
  breweries   Brewery[]
  BreweryEdit BreweryEdit[]
}

model State {
  id        String  @id @default(cuid())
  isoCode   String
  name      String
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId String
  cities    City[]
  users     User[]
}

model City {
  id      String @id @default(cuid())
  name    String
  state   State  @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId String
}

model BreweryFavorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  brewery   Brewery  @relation(fields: [breweryId], references: [id], onDelete: Cascade)
  breweryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BeerFavorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  beer      Beer     @relation(fields: [beerId], references: [id], onDelete: Cascade)
  beerId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brewery {
  id                String            @id @default(uuid())
  slug              String            @unique
  name              String
  status            Status            @default(PENDING)
  address1          String
  address2          String?
  city              String
  region            String
  postalCode        String
  country           Country           @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId         String
  formattedAddress  String
  description       String
  website           String
  logoUrl           String
  headline          String
  images            BreweryImages[]
  beers             Beer[]
  breweryReviews    BreweryReview[]
  breweryFavourites BreweryFavorite[]
  breweryType       BreweryType       @relation(fields: [breweryTypeId], references: [id], onDelete: Cascade)
  breweryTypeId     String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  Report            Report[]
  BreweryEdits      BreweryEdit[]
}

model BreweryEdit {
  id               String          @id @default(uuid())
  brewery          Brewery?        @relation(fields: [breweryId], references: [id], onDelete: Cascade)
  breweryId        String?
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  name             String
  status           Status          @default(PENDING)
  address1         String
  address2         String?
  city             String
  region           String
  postalCode       String
  country          Country         @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId        String
  formattedAddress String
  description      String
  website          String
  logoUrl          String
  headline         String
  images           BreweryImages[]
  breweryType      BreweryType     @relation(fields: [breweryTypeId], references: [id], onDelete: Cascade)
  breweryTypeId    String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model BreweryImages {
  id            String       @id @default(uuid())
  image         String       @unique
  order         Int
  brewery       Brewery?     @relation(fields: [breweryId], references: [id], onDelete: Cascade)
  breweryId     String?
  BreweryEdit   BreweryEdit? @relation(fields: [breweryEditId], references: [id])
  breweryEditId String?
}

model BreweryReview {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  brewery   Brewery  @relation(fields: [breweryId], references: [id], onDelete: Cascade)
  breweryId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Report    Report[]
}

model BreweryType {
  id          String        @id @default(uuid())
  name        String
  desription  String?
  status      Status        @default(PENDING)
  breweries   Brewery[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  BreweryEdit BreweryEdit[]
}

model Beer {
  id             String         @id @default(uuid())
  slug           String         @unique
  name           String
  status         Status         @default(PENDING)
  description    String
  abv            String
  ibu            String?
  yearCreated    Int?
  available      Boolean
  headline       String
  beerReviews    BeerReview[]
  beerFavourites BeerFavorite[]
  brewery        Brewery        @relation(fields: [breweryId], references: [id], onDelete: Cascade)
  breweryId      String
  style          Style?         @relation(fields: [styleId], references: [id], onDelete: SetNull)
  styleId        String?
  images         BeerImages[]
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Report         Report[]
}

model BeerImages {
  id     String  @id @default(uuid())
  image  String  @unique
  order  Int
  beer   Beer?   @relation(fields: [beerId], references: [id], onDelete: Cascade)
  beerId String?
}

model BeerReview {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  beer      Beer     @relation(fields: [beerId], references: [id], onDelete: Cascade)
  beerId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Report    Report[]
}

model ParentStyle {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  status      Status   @default(PENDING)
  styles      Style[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Style {
  id            String      @id @default(uuid())
  name          String
  slug          String      @unique
  region        String[]
  description   String?
  abvLow        String?
  abvHigh       String?
  ibuLow        String?
  ibuHigh       String?
  status        Status      @default(PENDING)
  parentStyle   ParentStyle @relation(fields: [parentStyleId], references: [id], onDelete: Cascade)
  parentStyleId String
  beers         Beer[]
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Report {
  id              String         @id @default(uuid())
  user            User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?
  type            ReportTypes
  beer            Beer?          @relation(fields: [beerId], references: [id], onDelete: Cascade)
  beerId          String?
  beerReview      BeerReview?    @relation(fields: [beerReviewId], references: [id], onDelete: Cascade)
  beerReviewId    String?
  brewery         Brewery?       @relation(fields: [breweryId], references: [id], onDelete: Cascade)
  breweryId       String?
  breweryReview   BreweryReview? @relation(fields: [breweryReviewId], references: [id], onDelete: Cascade)
  breweryReviewId String?
  comment         String
  Status          Status         @default(PENDING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model BlogView {
  id        String   @id @default(uuid())
  slug      String
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogVote {
  id        String   @id @default(uuid())
  slug      String
  vote      Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, userId])
}
